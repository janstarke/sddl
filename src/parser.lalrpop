use std::str::FromStr;

grammar;

pub AccessMask: crate::AccessMask = {
    <n:Number> => crate::AccessMask::from(n)
};


Number: u32 = {
    <s:r"(0|0x)?[0-9a-fA-F]+"> => {
        if s.len() == 1 {
            u32::from_str(s).unwrap()
        } else {
            if s.chars().next().unwrap() == '0' {
                let s = &s[1..];
                if s.chars().next().unwrap() == 'x' {
                    u32::from_str_radix(&s[1..], 16).unwrap()
                } else {
                    u32::from_str_radix(s, 8).unwrap()
                }
            } else {
                u32::from_str(s).unwrap()
            }
        }
    }
}

SingleAccessMask: crate::AccessMask = {
    "GR" => crate::AccessMask::GENERIC_READ,
    "GW" => crate::AccessMask::GENERIC_WRITE,
    "GX" => crate::AccessMask::GENERIC_EXECUTE,
    "GA" => crate::AccessMask::GENERIC_ALL,
    "MA" => crate::AccessMask::MAXIMUM_ALLOWED,
    "AS" => crate::AccessMask::ACCESS_SYSTEM_SECURITY,
    "WO" => crate::AccessMask::WRITE_OWNER,
    "WD" => crate::AccessMask::WRITE_DACL,
    "RC" => crate::AccessMask::READ_CONTROL,
    "SD" => crate::AccessMask::DELETE,
    "CR" => crate::AccessMask::CONTROL_ACCESS,

    "CA" => crate::constants::ADS_RIGHT_DS_CONTROL_ACCESS,
    "LO" => crate::constants::ADS_RIGHT_DS_LIST_OBJECT,
    "DT" => crate::constants::ADS_RIGHT_DS_DELETE_TREE,
    "WP" => crate::constants::ADS_RIGHT_DS_WRITE_PROP,
    "RP" => crate::constants::ADS_RIGHT_DS_READ_PROP,
    "SW" => crate::constants::ADS_RIGHT_DS_SELF,
    "LC" => crate::constants::ADS_RIGHT_ACTRL_DS_LIST,
    "DC" => crate::constants::ADS_RIGHT_DS_DELETE_CHILD,
    "CC" => crate::constants::ADS_RIGHT_DS_CREATE_CHILD,
    "NW" => crate::constants::SYSTEM_MANDATORY_LABEL_NO_WRITE_UP,
    "NR" => crate::constants::SYSTEM_MANDATORY_LABEL_NO_READ_UP,
    "NX" => crate::constants::SYSTEM_MANDATORY_LABEL_NO_EXECUTE_UP,
    "FA" => *crate::constants::FILE_ALL,
    "FR" => *crate::constants::FILE_READ,
    "FW" => *crate::constants::FILE_WRITE,
    "FX" => *crate::constants::FILE_EXECUTE,
    "KA" => *crate::constants::KEY_ALL,
    "KR" => *crate::constants::KEY_READ,
    "KW" => *crate::constants::KEY_WRITE,
    "KX" => *crate::constants::KEY_EXECUTE,
}
